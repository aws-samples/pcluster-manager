AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Pcluster Manager Cognito User Pool

Parameters:
  CallbackURL:
    Description: Allowed CallbackURL pointing back to the application.
    Type: String
    Default: https://apiid.execute-api.region.amazonaws.com/login
  LogoutURL:
    Description: Allowed LogoutURL pointing back to the application.
    Type: String
    Default: https://apiid.execute-api.region.amazonaws.com/index.html
  AdminUserEmail:
    Description: Email address of administrative user setup by default.
    Type: String
    Default: user@amazon.com
  EnableMFA:
    AllowedValues: [true, false]
    Default: false
    Description: Whether or not to enable MFA through SMS.
    Type: String

Conditions:
  GovCloud: !Equals [!Ref AWS::Region, 'us-gov-west-1']
  MFA: !Equals [!Ref EnableMFA, true]

Resources:
  SNSRole:
    Condition: MFA
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:publish
                Resource: '*'

  UserPoolClientSecret:
    Type: Custom::UserPoolClientSecret
    Properties:
      ServiceToken: !GetAtt UserPoolClientSecretFunction.Arn
      UserPoolId:  !Ref CognitoUserPool
      AppClientId: !Ref CognitoAppClient

  UserPoolClientSecretFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 20
      TracingConfig:
        Mode: Active
      Role: !GetAtt UserPoolClientSecretRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import random
          import string
          import json

          cognito = boto3.client("cognito-idp")
          secretsmanager = boto3.client("secretsmanager")

          def generate_secret(stack_name, resource_id):
              alnum = string.ascii_uppercase + string.digits
              return f"{stack_name}-{resource_id}-" + "".join(random.choice(alnum) for _ in range(12))

          def create_physical_resource_id():
              alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
              return "".join(random.choice(alnum) for _ in range(16))

          def handler(event, context):
              print(event)
              print("boto version {}".format(boto3.__version__))

              stack_name = event["StackId"].split("/")[1]
              user_pool_id = event["ResourceProperties"]["UserPoolId"]
              app_client_id = event["ResourceProperties"]["AppClientId"]
              logical_resource_id = event["LogicalResourceId"]

              response_data = {}
              reason = None
              response_status = cfnresponse.SUCCESS
              try:
                  if event["RequestType"] == "Create":
                      response_data["Message"] = "Resource creation successful!"

                      user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=app_client_id)
                      client_secret = user_pool_client["UserPoolClient"]["ClientSecret"]
                      secret_name = generate_secret(stack_name, logical_resource_id)

                      secret = json.dumps({"userPoolId": user_pool_id, "clientId": app_client_id, "clientSecret": client_secret})

                      resp = secretsmanager.create_secret(
                          Name=secret_name,
                          Description=f"Client Secret for {app_client_id} / user pool {user_pool_id}",
                          SecretString=secret,
                          Tags=[
                              {"Key": "custom:cloudformation:stack-name", "Value": stack_name},
                              {"Key": "custom:cloudformation:logical-id", "Value": logical_resource_id},
                          ],
                      )
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"], "SecretVersionId": resp["VersionId"]}

                  elif event["RequestType"] == "Update":
                      user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=app_client_id)
                      client_secret = user_pool_client["UserPoolClient"]["ClientSecret"]
                      secret_name = event["PhysicalResourceId"]
                      secret = json.dumps({"userPoolId": user_pool_id, "clientId": app_client_id, "clientSecret": client_secret})
                      resp = secretsmanager.update_secret(
                          SecretId=secret_name,
                          Description=f"Client Secret for {app_client_id} / user pool {user_pool_id}",
                          SecretString=secret,
                      )
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"], "SecretVersionId": resp["VersionId"]}

                  else:
                      secret_name = event["PhysicalResourceId"]
                      resp = secretsmanager.delete_secret(SecretId=secret_name, ForceDeleteWithoutRecovery=True)
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"]}

              except Exception as exception:
                  response_status = cfnresponse.FAILED
                  reason = "Failed {}: {}".format(event["RequestType"], exception)

              cfnresponse.send(event, context, response_status, response_data, secret_name, reason)

  UserPoolClientSecretRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CognitoPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
                    - { UserPoolId: !Ref CognitoUserPool }
        - PolicyName: SecretsManagerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:TagResource
                  - secretsmanager:UpdateSecret
                  - secretsmanager:DeleteSecret
                Resource:
                  - !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}*

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Join [ "-", ["pcluster-manager-auth", !Select [2, !Split [ "/", !Ref 'AWS::StackId']]]]

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
        - phone_number
      EnabledMfas: !If [MFA, [SMS_MFA], !Ref AWS::NoValue]
      MfaConfiguration: !If [MFA, 'ON', 'OFF']
      SmsConfiguration:
        ExternalId: !Sub ${AWS::StackName}-external
        SnsCallerArn: !If [MFA, !GetAtt SNSRole.Arn, !Ref AWS::NoValue]
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolName: !Sub ${AWS::StackName}-userpool
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailSubject: "[PclusterManager] Welcome to Pcluster Manager, please verify your account."
          EmailMessage: "Thanks for installing PclusterManager on your AWS account. The following user has been created: {username}<br /><br />Please use this temporary password to login to your account: {####}"
      UsernameAttributes:
        - 'email'
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Thanks for signing up to PclusterManager. Please the following code to verify your account: {####}"
        EmailSubject: "[PclusterManager] Please verify your account"
      EmailVerificationSubject: "[PclusterManager] Please verify your account."
      EmailVerificationMessage: "Thanks for installing PclusterManager on your AWS account. Please click the link below to verify your email address. {####}"

  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      DefaultRedirectURI: !Sub ${CallbackURL}
      CallbackURLs:
        - !Sub ${CallbackURL}
      LogoutURLs:
        - !Sub ${LogoutURL}
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 7 #days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: "days"
        IdToken: "days"

  CognitoUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group that can view and manage clusters
      GroupName: admin
      Precedence: 1
      UserPoolId: !Ref CognitoUserPool

  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrator group that can promote users to be admins.
      GroupName: user
      Precedence: 2
      UserPoolId: !Ref CognitoUserPool

  CognitoAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref AdminUserEmail
      Username: !Ref AdminUserEmail
      UserPoolId: !Ref CognitoUserPool

  CognitoUserToAdminGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoAdminGroup
      Username: !Ref CognitoAdminUser
      UserPoolId: !Ref CognitoUserPool

  CognitoUserToUserGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoUserGroup
      Username: !Ref CognitoAdminUser
      UserPoolId: !Ref CognitoUserPool

Outputs:

  UserPoolAuthPrefix:
    Description: The prefix of the domain of the authorization server.
    Value: !Ref UserPoolDomain

  UserPoolAuthDomain:
    Description: The domain of the authorization server.
    Value: !Sub
      - https://${Domain}.${Auth}.${AWS::Region}.amazoncognito.com
      - {Domain: !Ref UserPoolDomain, Auth: !If [GovCloud, 'auth-fips', 'auth']}

  UserPoolId:
    Description: Cognito UserPool Id
    Value:  !Ref CognitoUserPool

  UserPoolClientSecretArn:
    Description: The app client secret ARN for PclusterManager.
    Value: !GetAtt UserPoolClientSecret.SecretArn

  UserPoolClientSecretName:
    Description: The app client secret name for PclusterManager.
    Value: !GetAtt UserPoolClientSecret.SecretName
