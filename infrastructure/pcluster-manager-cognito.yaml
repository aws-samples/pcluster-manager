AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Pcluster Manager Cognito User Pool

Parameters:
  AdminUserEmail:
    Description: Email address of administrative user setup by default.
    Type: String
    MinLength: 1
  AdminUserPhone:
    Description: (Optional) Phone number of administrative user setup by default. This is required if MFA is enabled.
    Type: String
    Default: '+10000000000'
  EnableMFA:
    AllowedValues: [true, false]
    Default: false
    Description: Whether or not to enable MFA through SMS.
    Type: String

Conditions:
  GovCloud: !Equals [!Ref AWS::Region, 'us-gov-west-1']
  MFA: !Equals [!Ref EnableMFA, true]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Admin info
        Parameters:
          - AdminUserEmail
          - AdminUserPhone
      - Label:
          default: Multi Factor Auth Config
        Parameters:
          - EnableMFA
    ParameterLabels:
      AdminUserEmail:
        default: Initial Admin's Email
      AdminUserPhone:
        default: Initial Admin's Phone Number
      EnableMFA:
        default: Require Multi-Factor Authentication for all Users



Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:publish
                Resource: '*'


  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Join [ "-", ["pcluster-manager-auth", !Select [2, !Split [ "/", !Ref 'AWS::StackId']]]]

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
        - !If [MFA, phone_number, !Ref AWS::NoValue]
      EnabledMfas: !If [MFA, [SMS_MFA], !Ref AWS::NoValue]
      MfaConfiguration: !If [MFA, 'ON', 'OFF']
      SmsConfiguration:
        Fn::If:
          - MFA
          - ExternalId: !Sub ${AWS::StackName}-external
            SnsCallerArn: !GetAtt SNSRole.Arn
          - !Ref AWS::NoValue
      Schema: !If
        - MFA
        - [{Name: email, AttributeDataType: String, Mutable: true, Required: true}, {Name: phone_number, AttributeDataType: String, Mutable: false, Required: true}]
        - [{Name: email, AttributeDataType: String, Mutable: true, Required: true}]
      UserPoolName: !Sub ${AWS::StackName}-userpool
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: "[PClusterManager] Welcome to Pcluster Manager, please verify your account."
          EmailMessage: "Thanks for installing PClusterManager on your AWS account. The following user has been created: {username}<br /><br />Please use this temporary password to login to your account: {####}"
      UsernameAttributes:
        - 'email'
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Thanks for signing up to PClusterManager. Please use the following code to verify your account: {####}"
        EmailSubject: "[PClusterManager] Please verify your account"
      EmailVerificationSubject: "[PClusterManager] Please verify your account."
      EmailVerificationMessage: "Thanks for installing PClusterManager on your AWS account. Please click the link below to verify your email address. {####}"


  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group that can manage clusters and users
      GroupName: admin
      Precedence: 1
      UserPoolId: !Ref CognitoUserPool

  CognitoAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref AdminUserEmail
        - Name: phone_number
          Value: !Ref AdminUserPhone
      Username: !Ref AdminUserEmail
      UserPoolId: !Ref CognitoUserPool

  CognitoUserToAdminGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoAdminGroup
      Username: !Ref CognitoAdminUser
      UserPoolId: !Ref CognitoUserPool

Outputs:

  UserPoolAuthDomain:
    Description: The domain of the authorization server.
    Value: !Sub
      - https://${Domain}.${Auth}.${AWS::Region}.amazoncognito.com
      - {Domain: !Ref UserPoolDomain, Auth: !If [GovCloud, 'auth-fips', 'auth']}

  UserPoolId:
    Description: Cognito UserPool Id
    Value:  !Ref CognitoUserPool

  SNSRole:
    Description: Role for SNS
    Value: !GetAtt SNSRole.Arn
